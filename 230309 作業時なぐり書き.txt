data-idの使い方がわかってきたので

createのときにレスポンスにidを含めるコードを書く。そのためにGASのコードを編集したい。

編集するのはmodel.gsのcreate部分になるはずだ。
setValuesに使用する配列の名前がinfoArrとなっていて、Infoオブジェクトをまとめた配列と区別しづらい。ここではデータをセットするためだけに使われる配列ということで、convertedArrとかに名前を変更
→new ModelResponseの第三引数に[{id:lastRow+1}]を入れて、idが返るようにした

次はviewでHTML側に変更を加えるために、controllerでviewを呼び出す部分を作る
メソッド名候補は、redraw()で、その中でさらにプライベートメソッドonCreateResponseなどに分岐
もしくは、onCreateResponse単体で作っても良い
あと、staticにするかどうかも考える必要がある。
→どのみち変更を加えるためにviewElmが必要なので、インスタンスメソッドにすれば良いだろう。viewElmの取得はcontroller側で行えばよい（リクエストの時はcreateをinitのイベントハンドラから呼び出していたためそちらからviewElmを提供していたが、今回はcontroller内で受け取ったレスポンスに反応させたいので、controllerから提供することにする)
→いま、Controller.create(info)のようにやってるけど、レスポンス返ってきたらviewElmに少なからず変更を加えるわけで、createなんかもインスタンスメソッド化すればControllerインスタンスが１つのviewを制御する、という意味合いを強めることができる。
→しかし、一個一個を担当するのはViewインスタンスなのだから、Controllerは全体を見渡せる立ち位置にいたほうが良い気もする。
→よって、Controllerは静的メソッドを基本として作る方針は変えずにいこうとおもう。ただしレスポンスを反映させるのにviewElmが必要なので、第２引数にviewElmをとることにした

init.jsのController.create(info)に第２引数にviewElmをとらせて、それにあわせController側の関数も変更する
→気づいたけど、ViewオブジェクトはHTMLElementの情報ももってる。だからイベントハンドラからinfoを渡すんじゃなくて、Viewインスタンスごと渡したらもっと楽じゃね？？？？
→infoを渡すんじゃなくて、Viewインスタンスを渡すことにする。
init.jsのController.create呼び出し部分と、view.jsあたりに変更を加えるべし

一旦GASでidも含めてレスポンスし、それをもとにdata-id属性にセットするとこまで書けた（はず）なのでテストしてみる
→成功。

続いてViewのgetInfoによりリクエスト作成前にもdata*属性を利用したdata-id="数字"型の属性を取得するコードを書いた。
それを利用して、Controller.create()で重複してデータをcreateしないよう警告を出すことにした
OKかキャンセルで警告を出して処理を中断することもできるコードをcontrollerに書いた。ただし、いずれ作成結果を検索結果のように表示する機能を実装したら、これは廃止したい



だいたいできたのでいったんcreateはおいとく
readの実装を再開したい。どこまでやってたっけ？？
→Model.read()まで
だけど、一旦「コントローラーがinfoを受け取る仕様からviewを受け取る仕様に変更する」ことはやっておきたい
→完了

model.gsのreadのほうを実装していく
まずデータベースの全データを二次元配列で取得して、各列ごとに検索。そして、部分一致でやりたい(学科とか経験とかの間違える危険のない部分は完全一致にしてもいいけど)。

いったん直感でつくっているところ
!! 検索の時IDのとこだけは別扱いするように！！
idArrayなしで作れたら一番いい

いったんGASが書けたので、controllerにJSONが返ってくるとこまでテスト
と思ったら検索のイベントリスナー忘れてたので、そこをつくる

22:16 レスポンスかえってはきたけどinfoArrの要素４つが全部からっぽなので、原因究明のため一時的にブラウザ環境からいろいろいじくってみる
→それに関しては、eachInfoを{}ではなく誤って[]で宣言してしまっていたから。
そして、新たに問題が見つかった
複数の条件を適用しようとすると、失敗する
→わかった。
データレンジを最初getValuesしたときに、一行目に相当する要素は無関係だからいらないや、と思ってi=1から始めてしまったのだが、searchResultsは毎ループ更新されていくので、初回以外はi=1から始めたせいで一個一個本来あるべきデータが捨てられてしまっていたのだ。
だからsearchResultsとidArrayをi=0から回すようにし、先頭の要素は予めshiftしておくように変更したことで、正しく動作するようになった
検索機能のGASのパートは完成



次は、検索機能のレンダリングを実装する。
出発点は、modelResponseが返ってくるController.read()のasync即時関数内
各Infoのセットを担当するのはreadの引数viewとは別物のViewインスタンスであることに注意せよ

いったん、infoの表示に先立ってテンプレートのレンダリングを行う部分が完成した

検索が押されたらすぐにviewを消す必要があるなと思った

view.setValue()のとき、空欄だったら何も値をセットしない、というふうにする必要がある。ボタンの内容がわからなくなるからだ
しかし、一旦何も考えず全部セットするコードを各
&nbsp;はjsからは"\u00A0"として表現できるらしい

検索を押したらまず既存viewをクリアする



そのへんもできたので、次は作成を押したら検索結果を消して、それから返ってきた情報を検索結果と同様に表示するプログラムを作る


